from django.shortcuts import render
from django.utils import timezone
from django.utils.translation import gettext as _

from rest_framework import generics, permissions
from rest_framework.response import Response
from rest_framework.views import APIView

from . models import *
from . serializers import *


ERROR_MESS = _("Non hai accesso a questa risorsa")


class Get_IsAuthenticated(generics.ListAPIView):
    allowed_methods = ('GET',)
    permission_classes = [permissions.IsAuthenticated]

class Get_Post_IsAuthenticated(generics.ListCreateAPIView):
    allowed_methods = ('GET','POST',)
    permission_classes = [permissions.IsAuthenticated]


class ApiDeliveryCampainList(Get_IsAuthenticated):
    """
    """
    description = 'Active delivery campains'
    serializer_class = DeliveryCampainSerializer

    def get(self, request, format=None):
        user = request.user
        my_deliverypoints = OperatorDeliveryPoint.objects.filter(operator=user,
                                                                 is_active=True)
        campains_id = set()
        for dp in my_deliverypoints:
            campain = dp.delivery_point.campain
            if campain.is_active and campain.is_in_progress():
                campains_id.add(campain.id)
        self.queryset = DeliveryCampain.objects.filter(pk__in=campains_id)
        return super(ApiDeliveryCampainList, self).get(request)


class ApiUserDeliveryPointList(Get_IsAuthenticated):
    """
    """
    description = 'Users in my delivery points'
    serializer_class = UserDeliveryPointSerializer

    def get(self, request, *args, **kwargs):
        user = request.user
        campain = DeliveryCampain.objects.filter(pk=kwargs.get('campain_pk')).first()
        if not campain or not campain.is_active or not campain.is_in_progress():
            return Response(ERROR_MESS)
        my_deliverypoints = OperatorDeliveryPoint.objects.filter(operator=user,
                                                                 delivery_point__campain=campain,
                                                                 is_active=True)
        if not my_deliverypoints: return Response(ERROR_MESS)
        users_dp_id = []
        for dp in my_deliverypoints:
            users_dp = UserDeliveryPoint.objects.filter(delivery_point=dp.delivery_point)
            for user_dp in users_dp:
                users_dp_id.append(user_dp.id)
        self.queryset = UserDeliveryPoint.objects.filter(id__in=users_dp_id)
        return super(ApiUserDeliveryPointList, self).get(request, *args, **kwargs)


class GoodDeliveryCreate(Get_Post_IsAuthenticated):
    """
    """
    description = 'New good delivery'
    serializer_class = GoodDeliverySerializer
    queryset = GoodDelivery.objects.all()
    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)



